"""
Имеется целочисленный массив nums, отсортированный по возрастанию (с отличными значениями).
Перед передачей в вашу функцию numsвозможно, поворачивается по неизвестному индексу поворота k (1 <= k < nums.length) таким образом, что результирующий массив является [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (с индексацией 0). Например, [0,1,2,4,5,6,7] может быть повернут по индексу поворота 3 и стать [4,5,6,7,0,1,2].
Учитывая массив nums после возможного поворота и целое число target, верните индекс target, если он находится в nums , или -1 если его нет в nums.
Вы должны написать алгоритм со O(log n) сложностью во время выполнения.
"""

def search(nums: list[int], target: int) -> int:
    low = 0
    end = len(nums) - 1

    while low <= end:
        if target not in nums:
            return -1
        mid = low + end // 2
        if nums[mid] == target:
            return mid
        elif nums[mid] < target:
            low = mid + 1
        else:
            end = mid - 1
    return nums[low]

if __name__ == "__main__":
    nums = [4, 5, 6, 7, 0, 1, 2]
    target = 0
    print(search(nums, target))  # Output: 4
